// Generated by Dagger (https://dagger.dev).
package com.example.compass_aac.viewmodel.urgencyaac;

import com.example.data.repository.FindNodeRepository;
import com.example.domain.usecase.UrgencyUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CategoryViewModel_Factory implements Factory<CategoryViewModel> {
  private final Provider<UrgencyUseCase> useCaseProvider;

  private final Provider<FindNodeRepository> repositoryProvider;

  public CategoryViewModel_Factory(Provider<UrgencyUseCase> useCaseProvider,
      Provider<FindNodeRepository> repositoryProvider) {
    this.useCaseProvider = useCaseProvider;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public CategoryViewModel get() {
    return newInstance(useCaseProvider.get(), repositoryProvider.get());
  }

  public static CategoryViewModel_Factory create(Provider<UrgencyUseCase> useCaseProvider,
      Provider<FindNodeRepository> repositoryProvider) {
    return new CategoryViewModel_Factory(useCaseProvider, repositoryProvider);
  }

  public static CategoryViewModel newInstance(UrgencyUseCase useCase,
      FindNodeRepository repository) {
    return new CategoryViewModel(useCase, repository);
  }
}
