// Generated by Dagger (https://dagger.dev).
package com.example.compass_aac.module;

import com.example.domain.repository.UserRepository;
import com.example.domain.usecase.RegisterUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserUseCaseModule_ProvideRegisterUseCaseFactory implements Factory<RegisterUseCase> {
  private final Provider<UserRepository> repositoryProvider;

  public UserUseCaseModule_ProvideRegisterUseCaseFactory(
      Provider<UserRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public RegisterUseCase get() {
    return provideRegisterUseCase(repositoryProvider.get());
  }

  public static UserUseCaseModule_ProvideRegisterUseCaseFactory create(
      Provider<UserRepository> repositoryProvider) {
    return new UserUseCaseModule_ProvideRegisterUseCaseFactory(repositoryProvider);
  }

  public static RegisterUseCase provideRegisterUseCase(UserRepository repository) {
    return Preconditions.checkNotNullFromProvides(UserUseCaseModule.INSTANCE.provideRegisterUseCase(repository));
  }
}
